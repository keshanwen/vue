{"version":3,"file":"runtime-dom.esm-bundler.js","sources":["../../shared/src/index.ts","../src/nodeOps.ts","../src/modules/attr.ts","../src/modules/class.ts","../src/modules/events.ts","../src/modules/style.ts","../src/patchProp.ts","../../reactivity/src/effect.ts","../../reactivity/src/baseHandlers.ts","../../reactivity/src/reactive.ts","../../reactivity/src/ref.ts","../../reactivity/src/computed.ts","../../runtime-core/src/vnode.ts","../../runtime-core/src/apiCreateApp.ts","../../runtime-core/src/componentPublicInstance.ts","../../runtime-core/src/component.ts","../../runtime-core/src/scheduler.ts","../../runtime-core/src/renderer.ts","../../runtime-core/src/h.ts","../src/index.ts"],"sourcesContent":["export const isObject = (value) => typeof value == 'object' && value !== null;\r\nexport const extend = Object.assign\r\nexport const isArray = Array.isArray;\r\nexport const isFunction = (value) => typeof value == 'function'\r\nexport const isNumber = (value) => typeof value == 'number';\r\nexport const isString = (value) => typeof value === 'string';\r\nexport const isIntegerKey = (key) => parseInt(key) + '' === key;\r\n\r\n\r\nlet hasOwnpRroperty = Object.prototype.hasOwnProperty;\r\nexport const hasOwn = (target, key) => hasOwnpRroperty.call(target, key);\r\n\r\nexport const hasChanged = (oldValue,value) => oldValue !== value\r\n\r\nexport * from './shapeFlag'","export const nodeOps = {\n    // createElement, 不同的平台创建元素方式不同\n    // 元素\n    createElement: tagName => document.createElement(tagName), // 增加\n    remove: child => { // 删除\n        const parent = child.parentNode;\n        if (parent) {\n            parent.removeChild(child)\n        }\n    },\n    insert: (child, parent, anchor = null) => { // 插入\n        parent.insertBefore(child, anchor); // 如果参照物为空 则相当于appendChild\n    },\n    querySelector: selector => document.querySelector(selector),\n    setElementText: (el, text) => el.textContent = text,\n    // 文本操作 创建文本 \n    createText: text => document.createTextNode(text),\n    setText: (node, text) => node.nodeValue = text,\n    nextSibling:(node) => node.nextSibling \n}\n\n","\n\nexport const patchAttr = (el,key,value) =>{\n    if(value == null){\n        el.removeAttribute(key);\n    }else {\n        el.setAttribute(key,value);\n    }\n}","\n\nexport const patchClass = (el,value) =>{\n    if(value == null){\n        value = '';\n    }\n    el.className = value\n}","// 1.给元素缓存一个绑定事件的列表\n// 2.如果缓存中没有缓存过的，而且value有值 需要绑定方法，并且缓存起来\n// 3.以前绑定过需要删除掉，删除缓存\n// 4.如果前后都有，直接改变invoker中value属性指向最新的事件 即可\nexport const patchEvent = (el,key,value) =>{ // vue指令 删除和添加\n    // 对函数的缓存\n    const invokers = el._vei || (el._vei = {});   \n    const exists = invokers[key]; // 如果不存在\n    if(value && exists){ // 需要绑定事件 而且还存在的情况下\n        exists.value = value;\n    }else{\n        const eventName = key.slice(2).toLowerCase();\n        if(value){ // 要绑定事件 以前没有绑定过\n            let invoker = invokers[key] = createInvoker(value);\n            el.addEventListener(eventName,invoker)\n        }else{ // 以前绑定了 当时没有value\n            el.removeEventListener(eventName,exists);\n            invokers[key] = undefined;\n        } \n    }\n}\nfunction createInvoker(value){\n    const invoker = (e) =>{ invoker.value(e);}\n    invoker.value = value; // 为了能随时更改value属性\n    return invoker;\n}\n\n// 一个元素 绑定事件  addEventListener(fn) addEventListener(fn1) \n\n// value = fn\n// div @click=\"fn\"  ()=> value()\n\n// div","export const patchStyle = (el,prev,next) =>{ // cssText;\n    const style = el.style; //获取样式 \n    if(next == null){\n        el.removeAttribute('style') // {style:{}}  {}\n    }else{\n        // 老的里新的有没有 \n        if(prev){  // {style:{color}} => {style:{background}}\n            for(let key in prev){\n                if(next[key] == null){ // 老的里有 新的里没有 需要删除\n                    style[key] = '';\n                }\n            }\n        }\n        // 新的里面需要赋值到style上\n        for(let key in next){ // {style:{color}} => {style:{background}}\n            style[key] = next[key];\n        }\n    }\n\n}","// 这个里面针对的是属性操作，一系列的属性操作\n\nimport { patchAttr } from \"./modules/attr\";\nimport { patchClass } from \"./modules/class\";\nimport { patchEvent } from \"./modules/events\";\nimport { patchStyle } from \"./modules/style\";\n\n\nexport const patchProp = (el,key,prevValue,nextValue) => {\n    switch (key) {\n        case 'class':\n            patchClass(el,nextValue); // 比对属性\n            break;\n        case 'style': // {style:{color:'red'}}  {style:{background:'red'}}\n            patchStyle(el,prevValue,nextValue);\n            break;\n        default:\n            // 如果不是事件 才是属性\n            if(/^on[^a-z]/.test(key)){\n                patchEvent(el,key,nextValue); // 事件就是添加和删除 修改\n            }else{\n                patchAttr(el,key,nextValue);\n            }\n\n            break;\n    }\n}\n","import { isArray, isIntegerKey } from \"@vue/shared/src\";\r\nimport { TriggerOrTypes } from \"./operators\";\r\n\r\nexport function effect(fn, options: any = {}) {\r\n    // 我需要让这个effect变成响应的effect，可以做到数据变化重新执行 \r\n    const effect = createReactiveEffect(fn, options);\r\n    if (!options.lazy) { // 默认的effect会先执行\r\n        effect(); // 响应式的effect默认会先执行一次\r\n    }\r\n    return effect;\r\n}\r\nlet uid = 0;\r\nlet activeEffect; // 存储当前的effect\r\nconst effectStack = []\r\nfunction createReactiveEffect(fn, options) {\r\n    const effect = function reactiveEffect() {\r\n        if (!effectStack.includes(effect)) { // 保证effect没有加入到effectStack中\r\n            try {\r\n                effectStack.push(effect);\r\n                activeEffect = effect;\r\n                return fn(); // 函数执行时会取值  会执行get方法\r\n            } finally {\r\n                effectStack.pop();\r\n                activeEffect = effectStack[effectStack.length - 1];\r\n            }\r\n        }\r\n    }\r\n    effect.id = uid++; // 制作一个effect标识 用于区分effect\r\n    effect._isEffect = true; // 用于标识这个是响应式effect\r\n    effect.raw = fn; // 保留effect对应的原函数\r\n    effect.options = options; // 在effect上保存用户的属性\r\n    return effect;\r\n}\r\n// 让，某个对象中的属性 收集当前他对应的effect函数\r\nconst targetMap = new WeakMap();\r\nexport function track(target, type, key) { // 可以拿到当前的effect\r\n    //  activeEffect; // 当前正在运行的effect\r\n    if (activeEffect === undefined) { // 此属性不用收集依赖，因为没在effect中使用\r\n        return;\r\n    }\r\n    let depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        targetMap.set(target, (depsMap = new Map));\r\n    }\r\n    let dep = depsMap.get(key);\r\n    if (!dep) {\r\n        depsMap.set(key, (dep = new Set))\r\n    }\r\n    if (!dep.has(activeEffect)) {\r\n        dep.add(activeEffect);\r\n    }\r\n}\r\n\r\n// 找属性对应的effect 让其执行 （数组、对象）\r\nexport function trigger(target, type, key?, newValue?, oldValue?) {\r\n\r\n    // 如果这个属性没有 收集过effect，那不需要做任何操作\r\n    const depsMap = targetMap.get(target);\r\n    if (!depsMap) return;\r\n\r\n    const effects = new Set(); // 这里对effect去重了\r\n    const add = (effectsToAdd) => {\r\n        if (effectsToAdd) {\r\n            effectsToAdd.forEach(effect => effects.add(effect));\r\n        }\r\n    }\r\n    // 我要将所有的 要执行的effect 全部存到一个新的集合中，最终一起执行\r\n\r\n    // 1. 看修改的是不是数组的长度 因为改长度影响比较大\r\n    if (key === 'length' && isArray(target)) {\r\n        // 如果对应的长度 有依赖收集需要更新\r\n        depsMap.forEach((dep, key) => {\r\n            if (key === 'length' || key > newValue) { // 如果更改的长度 小于收集的索引，那么这个索引也需要触发effect重新执行\r\n                add(dep)\r\n            }\r\n        })\r\n    } else {\r\n        // 可能是对象\r\n        if (key !== undefined) { // 这里肯定是修改， 不能是新增\r\n            add(depsMap.get(key)); // 如果是新增\r\n        }\r\n        // 如果修改数组中的 某一个索引 怎么办？\r\n        switch (type) {  // 如果添加了一个索引就触发长度的更新\r\n            case TriggerOrTypes.ADD:\r\n                if (isArray(target) && isIntegerKey(key)) {\r\n                    add(depsMap.get('length'));\r\n                }\r\n        }\r\n    }\r\n    effects.forEach((effect: any) => {\r\n        if(effect.options.scheduler){\r\n            effect.options.scheduler(effect);\r\n        }else{\r\n            effect();\r\n        }\r\n    })\r\n}\r\n// weakMap {name:'zf',age:12}  (map) =>{name => set(effect),age => set(effect)}\r\n// {name:'zf',age:12} => name => [effect effect]\r\n\r\n\r\n// 函数调用是一个栈型结构\r\n// effect(()=>{ // effect1   [effect1]\r\n//     state.name -> effect1\r\n//     effect(()=>{ // effect2\r\n//         state.age -> effect2\r\n//     })\r\n//     state.address -> effect1\r\n// })","// 实现 new Proxy(target, handler)\r\n\r\nimport { extend, hasChanged, hasOwn, isArray, isIntegerKey, isObject } from \"@vue/shared/src\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\";\r\nimport { reactive, readonly } from \"./reactive\";\r\n\r\n\r\nconst get = createGetter();\r\nconst shallowGet = createGetter(false, true);\r\nconst readonlyGet = createGetter(true);\r\nconst showllowReadonlyGet = createGetter(true, true);\r\nconst set = createSetter();\r\nconst shallowSet = createSetter(true);\r\nexport const mutableHandlers = {\r\n    get,\r\n    set\r\n}\r\nexport const shallowReactiveHandlers = {\r\n    get: shallowGet,\r\n    set: shallowSet\r\n}\r\n\r\nlet readonlyObj = {\r\n    set: (target, key) => {\r\n        console.warn(`set on key ${key} falied`)\r\n    }\r\n}\r\nexport const readonlyHandlers = extend({\r\n    get: readonlyGet,\r\n}, readonlyObj)\r\nexport const shallowReadonlyHandlers = extend({\r\n    get: showllowReadonlyGet,\r\n}, readonlyObj)\r\n\r\n// 是不是仅读的，仅读的属性set时会报异常\r\n// 是不是深度的 \r\nfunction createGetter(isReadonly = false, shallow = false) { // 拦截获取功能\r\n    return function get(target, key, receiver) { // let proxy = reactive({obj:{}})\r\n        // proxy + reflect\r\n        // 后续Object上的方法 会被迁移到Reflect Reflect.getProptypeof()\r\n        // 以前target[key] = value 方式设置值可能会失败 ， 并不会报异常 ，也没有返回值标识\r\n        // Reflect 方法具备返回值\r\n        // reflect 使用可以不使用 proxy es6语法\r\n\r\n        const res = Reflect.get(target, key, receiver); // target[key];\r\n        if(!isReadonly){\r\n            // 收集依赖，等会数据变化后更新对应的视图\r\n            track(target,TrackOpTypes.GET,key)\r\n        }\r\n        if(shallow){\r\n            return res;\r\n        }\r\n        if(isObject(res)){ // vue2 是一上来就递归，vue3 是当取值时会进行代理 。 vue3的代理模式是懒代理\r\n            return isReadonly ? readonly(res) : reactive(res)\r\n        }\r\n        return res;\r\n    }\r\n}\r\nfunction createSetter(shallow = false) { // 蓝爵设置功能\r\n    return function set(target, key, value, receiver) {\r\n\r\n        const oldValue = target[key]; // 获取老的值\r\n\r\n        let hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target,key);\r\n\r\n        const result = Reflect.set(target, key, value, receiver); // target[key] = value\r\n\r\n\r\n        if(!hadKey){\r\n            // 新增 \r\n            trigger(target,TriggerOrTypes.ADD,key,value);\r\n        }else if(hasChanged(oldValue,value)){\r\n            // 修改 \r\n            trigger(target,TriggerOrTypes.SET,key,value,oldValue)\r\n        }\r\n\r\n\r\n\r\n        // 我们要区分是新增的 还是修改的  vue2 里无法监控更改索引，无法监控数组的长度变化  -》 hack的方法 需要特殊处理\r\n\r\n\r\n        // 当数据更新时 通知对应属性的effect重新执行\r\n\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n","import { isObject } from \"@vue/shared\"\r\nimport {\r\n    mutableHandlers,\r\n    shallowReactiveHandlers,\r\n    readonlyHandlers,\r\n    shallowReadonlyHandlers\r\n} from './baseHandlers'\r\nexport function reactive(target){\r\n    return createReactiveObject(target,false,mutableHandlers)\r\n}\r\nexport function shallowReactive(target){\r\n    return createReactiveObject(target,false,shallowReactiveHandlers)\r\n}\r\n\r\nexport function readonly(target){\r\n    return createReactiveObject(target,true,readonlyHandlers)\r\n}\r\n\r\nexport function shallowReadonly(target){\r\n    return createReactiveObject(target,true,shallowReadonlyHandlers)\r\n}\r\n\r\n// 是不是仅读 是不是深度， 柯里化  new Proxy() 最核心的需要拦截 数据的读取和数据的修改  get set\r\nconst reactiveMap = new WeakMap(); // 会自动垃圾回收，不会造成内存泄漏， 存储的key只能是对象\r\nconst readonlyMap = new WeakMap();\r\nexport function createReactiveObject(target,isReadonly,baseHandlers){\r\n    // 如果目标不是对象 没法拦截了，reactive这个api只能拦截对象类型\r\n    if( !isObject(target)){\r\n        return target; \r\n    }\r\n    // 如果某个对象已经被代理过了 就不要再次代理了  可能一个对象 被代理是深度 又被仅读代理了\r\n    const proxyMap = isReadonly? readonlyMap:reactiveMap\r\n    const existProxy = proxyMap.get(target);\r\n    if(existProxy){\r\n        return existProxy; // 如果已经被代理了 直接返回即可\r\n    }\r\n    const proxy = new Proxy(target,baseHandlers);\r\n    proxyMap.set(target,proxy); // 将要代理的对象 和对应代理结果缓存起来\r\n\r\n    return proxy;\r\n}\r\n","import { hasChanged, isArray, isObject } from \"@vue/shared/src\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\";\r\nimport { reactive } from \"./reactive\";\r\n\r\nexport function ref(value) {\r\n    // 将普通类型 变成一个对象 , 可以是对象 但是一般情况下是对象直接用reactive更合理\r\n    return createRef(value)\r\n}\r\n\r\n// ref 和 reactive的区别 reactive内部采用proxy  ref中内部使用的是defineProperty\r\n\r\n\r\nexport function shallowRef(value) {\r\n    return createRef(value, true)\r\n}\r\n\r\n// 后续 看vue的源码 基本上都是高阶函数 做了类似柯里化的功能\r\n\r\nconst convert = (val) => isObject(val) ? reactive(val) : val\r\n// beta 版本 之前的版本ref 就是个对象 ，由于对象不方便扩展 改成了类\r\nclass RefImpl {\r\n    public _value; //表示 声明了一个_value属性 但是没有赋值\r\n    public __v_isRef = true; // 产生的实例会被添加 __v_isRef 表示是一个ref属性\r\n    constructor(public rawValue, public shallow) { // 参数中前面增加修饰符 标识此属性放到了实例上\r\n        this._value = shallow ? rawValue : convert(rawValue)// 如果是深度 需要把里面的都变成响应式的\r\n    }\r\n    // 类的属性访问器\r\n    get value() { // 代理 取值取value 会帮我们代理到 _value上\r\n        track(this, TrackOpTypes.GET, 'value');\r\n        return this._value\r\n    }\r\n    set value(newValue) {\r\n        if (hasChanged(newValue, this.rawValue)) { // 判断老值和新值是否有变化\r\n            this.rawValue = newValue; // 新值会作为老值\r\n            this._value = this.shallow ? newValue : convert(newValue);\r\n            trigger(this, TriggerOrTypes.SET, 'value', newValue);\r\n        }\r\n    }\r\n}\r\nfunction createRef(rawValue, shallow = false) {\r\n    return new RefImpl(rawValue, shallow)\r\n}\r\n\r\nclass ObjectRefImpl {\r\n    public __v_isRef = true;\r\n    constructor(public target, public key) {}\r\n    get value(){ // 代理  \r\n        return this.target[this.key] // 如果原对象是响应式的就会依赖收集\r\n    }\r\n    set value(newValue){\r\n        this.target[this.key] = newValue; // 如果原来对象是响应式的 那么就会触发更新\r\n    }\r\n}\r\n// promisify\r\n// promisifyAll\r\n\r\n\r\n// 将某一个key对应的值 转化成ref\r\nexport function toRef(target, key) { // 可以把一个对象的值转化成 ref类型\r\n    return new ObjectRefImpl(target, key)\r\n}\r\n\r\nexport function toRefs(object){ // object 可能传递的是一个数组 或者对象\r\n    const ret = isArray(object) ? new Array(object.length) :{}\r\n    for(let key in object){\r\n        ret[key] = toRef(object,key);\r\n    }\r\n    return ret;\r\n}","import { isFunction } from \"@vue/shared/src\";\nimport { effect, track, trigger } from \"./effect\";\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\";\n// 作业：调试 collectionHandlers ref 的api 和 computed\nclass ComputedRefImpl{\n    public _dirty = true; // 默认取值时不要用缓存\n    public _value;\n    public effect;\n    constructor(getter,public setter){ // ts 中默认不会挂载到this上\n        this.effect = effect(getter,{\n            lazy:true, // 默认不执行\n            scheduler:()=>{\n                if(!this._dirty){\n                    this._dirty = true;\n                    trigger(this,TriggerOrTypes.SET,'value')\n                }\n            }\n        })\n    }\n    get value(){ // 计算属性也要收集依赖\n        if(this._dirty){\n            this._value = this.effect(); // 会将用户的反回值返回\n            this._dirty = false;\n        }\n        track(this,TrackOpTypes.GET,'value')\n        return this._value;\n    }\n    set value(newValue){\n        this.setter(newValue)\n    }\n}\n\n// vue2 和 vue3 computed原理是不一样的\nexport function computed(getterOrOptions){\n    let getter;\n    let setter;\n\n\n    if(isFunction(getterOrOptions)){\n        getter = getterOrOptions;\n        setter = () =>{\n            console.warn('computed value must be readonly')\n        }\n    }else{\n        getter = getterOrOptions.get;\n        setter = getterOrOptions.set;\n    }\n\n    return new ComputedRefImpl(getter,setter)\n\n}","// createVNode  创建虚拟节点\n\nimport { isArray, isObject, isString, ShapeFlags } from \"@vue/shared/src\";\n\nexport function isVnode(vnode){\n    return vnode.__v_isVnode\n}\n// h(‘div',{style:{color:red}},'children'); //  h方法和createApp类似\nexport const createVNode = (type,props,children = null) =>{\n    // 可以根据type 来区分是组件 还是普通的元素\n\n    // 根据type来区分 是元素还是组件\n\n    // 给虚拟节点加一个类型\n    const shapeFlag = isString(type) ? \n        ShapeFlags.ELEMENT : isObject(type)? \n            ShapeFlags.STATEFUL_COMPONENT : 0\n\n\n    const vnode = { // 一个对象来描述对应的内容 ， 虚拟节点有跨平台的能力\n        __v_isVnode:true,// 他是一个vnode节点\n        type,\n        props,\n        children,\n        component:null, // 存放组件对应的实例\n        el:null, // 稍后会将虚拟节点和真实节点对应起来\n        key: props && props.key,// diff算法会用到key\n        shapeFlag // 判断出当前自己的类型 和 儿子的类型\n    } \n    normalizeChildren(vnode,children);\n    return vnode;\n}\n\nfunction normalizeChildren(vnode,children){\n    let type = 0;\n    if(children == null){ // 不对儿子进行处理\n\n    } else if(isArray(children)){\n        type = ShapeFlags.ARRAY_CHILDREN;\n    } else{\n        type = ShapeFlags.TEXT_CHILDREN;\n    }\n    vnode.shapeFlag |=  type\n}\nexport const Text = Symbol('Text')\nexport function normalizeVNode(child){\n    if(isObject(child)) return child;\n\n    return createVNode(Text,null,String(child));\n}","import { createVNode } from \"./vnode\"\n\nexport function createAppAPI(render){\n    return function createApp(rootComponent,rootProps){ // 告诉他那个组件那个属性来创建的应用\n        const app = {\n            _props:rootProps,\n            _component:rootComponent,\n            _container:null,\n            mount(container){ // 挂载的目的地\n                // let vnode = {}\n                // render(vnode,container);\n\n                // 1.根据组件创建虚拟节点\n                // 2.将虚拟节点和容器获取到后调用render方法进行渲染\n\n                // 创造虚拟节点\n                const vnode = createVNode(rootComponent,rootProps)\n\n                // 调用render\n                render(vnode,container)\n\n\n                app._container = container\n            }\n        }\n        return app\n    }\n}","import { hasOwn } from \"@vue/shared/src\"\n\nexport const PublicInstanceProxyHandlers = {\n    get({ _: instance }, key) {\n        // 取值时 要访问 setUpState， props ,data\n        const { setupState, props, data } = instance;\n        if (key[0] == '$') {\n            return; // 不能访问$ 开头的变量\n        }\n        if (hasOwn(setupState, key)) {\n            return setupState[key];\n        } else if (hasOwn(props, key)) {\n            return props[key];\n        } else if (hasOwn(data, key)) {\n            return data[key];\n        }\n    },\n    set({ _: instance }, key, value) {\n        const { setupState, props, data } = instance;\n        if (hasOwn(setupState, key)) {\n            setupState[key] = value;\n        } else if (hasOwn(props, key)) {\n            props[key] = value;\n        } else if (hasOwn(data, key)) {\n            data[key] = value;\n        }\n        return true;\n    }\n}","// 组件中所有的方法\n\nimport { isFunction, isObject, ShapeFlags } from \"@vue/shared/src\";\nimport { PublicInstanceProxyHandlers } from \"./componentPublicInstance\";\n\n\nexport function createComponentInstance(vnode) {\n    // webcomponent 组件需要有“属性” “插槽”\n    const instance = { // 组件的实例\n        vnode,\n        type: vnode.type, // 用户写的对象\n        props: {}, // props attrs 有什么区别 vnode.props\n        attrs: {},\n        slots: {},\n        ctx: {},\n        data:{},\n        setupState: {}, // 如果setup返回一个对象，这个对象会作为setUpstate\n        render: null,\n        subTree:null, // render函数的返回结果就是subTree\n        isMounted: false // 表示这个组件是否挂载过\n    }\n    instance.ctx = { _: instance } // instance.ctx._\n    return instance;\n}\n\nexport function setupComponent(instance) {\n    const { props, children } = instance.vnode; // {type,props,children}\n\n    // 根据props 解析出 props 和 attrs，将其放到instance上\n    instance.props = props; // initProps()\n    instance.children = children; // 插槽的解析 initSlot()\n\n    // 需要先看下 当前组件是不是有状态的组件， 函数组件\n\n    let isStateful = instance.vnode.shapeFlag & ShapeFlags.STATEFUL_COMPONENT\n    if (isStateful) { // 表示现在是一个带状态的组件\n        // 调用 当前实例的setup方法，用setup的返回值 填充 setupState和对应的render方法\n        setupStatefulComponent(instance)\n    }\n}\nfunction setupStatefulComponent(instance) {\n    // 1.代理 传递给render函数的参数\n    instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers as any)\n    // 2.获取组件的类型 拿到组件的setup方法\n    let Component = instance.type\n    let { setup } = Component;\n    // ------ 没有setup------\n    if(setup){\n        let setupContext = createSetupContext(instance);\n        const setupResult = setup(instance.props, setupContext); // instance 中props attrs slots emit expose 会被提取出来，因为在开发过程中会使用这些属性\n\n        handleSetupResult(instance,setupResult)\n\n    }else{\n        finishComponentSetup(instance);// 完成组件的启动\n    }\n}\nfunction handleSetupResult(instance,setupResult){\n    if(isFunction(setupResult)){\n        instance.render = setupResult\n    }else if(isObject(setupResult)){\n        instance.setupState = setupResult\n    }\n    finishComponentSetup(instance);\n}\nfunction finishComponentSetup(instance){\n    let Component = instance.type\n    if(!instance.render){\n        // 对template模板进行编译 产生render函数\n        // instance.render = render;// 需要将生成render函数放在实例上\n        if(!Component.render && Component.template){\n            // 编译 将结果 赋予给Component.render\n        }\n        instance.render = Component.render;\n    }\n\n    // 对vue2.0API做了兼容处理\n    // applyOptions \n}\nfunction createSetupContext(instance) {\n    return {\n        attrs: instance.attrs,\n        slots: instance.slots,\n        emit: () => { },\n        expose: () => { }\n    }\n}\n// 他们的关系涉及到后面的使用\n// instance 表示的组件的状态 各种各样的状态，组件的相关信息 \n// context 就4个参数 是为了开发时使用的\n// proxy 主要为了取值方便  =》 proxy.xxxx","\nlet queue = [];\nexport function queueJob(job) {\n    if(!queue.includes(job)){\n        queue.push(job);\n        queueFlush();\n    }\n}\nlet isFlushPending = false;\nfunction queueFlush(){\n    if(!isFlushPending){\n        isFlushPending = true;\n        Promise.resolve().then(flushJobs)\n    }\n}\n\nfunction flushJobs(){\n    isFlushPending = false\n    // 清空时  我们需要根据调用的顺序依次刷新  , 保证先刷新父在刷新子\n    queue.sort((a,b) => a.id - b.id);\n    for(let i = 0; i < queue.length; i++){\n        const job = queue[i];\n        job();\n    }\n    queue.length = 0;\n}","import { effect } from \"@vue/reactivity/src\";\nimport { ShapeFlags } from \"@vue/shared/src\";\nimport { createAppAPI } from \"./apiCreateApp\"\nimport { createComponentInstance, setupComponent } from \"./component\";\nimport { queueJob } from \"./scheduler\";\nimport { normalizeVNode, Text } from \"./vnode\";\n\nexport function createRenderer(rendererOptions) { // 告诉core 怎么渲染\n\n    const {\n        insert: hostInsert,\n        remove: hostRemove,\n        patchProp: hostPatchProp,\n        createElement: hostCreateElement,\n        createText: hostCreateText,\n        createComment: hostCreateComment,\n        setText: hostSetText,\n        setElementText: hostSetElementText,\n        nextSibling: hostNextSibling,\n    } = rendererOptions\n\n\n    // -------------------组件----------------------\n    const setupRenderEfect = (instance, container) => {\n        // 需要创建一个effect 在effect中调用 render方法，这样render方法中拿到的数据会收集这个effect，属性更新时effect会重新执行\n        instance.update = effect(function componentEffect() { // 每个组件都有一个effect， vue3 是组件级更新，数据变化会重新执行对应组件的effect\n            if (!instance.isMounted) {\n                // 初次渲染\n                let proxyToUse = instance.proxy;\n                // $vnode  _vnode \n                // vnode  subTree\n                let subTree = instance.subTree = instance.render.call(proxyToUse, proxyToUse);\n\n                // 用render函数的返回值 继续渲染\n                patch(null, subTree, container);\n                instance.isMounted = true;\n            } else {\n                // diff算法  （核心 diff + 序列优化 watchApi 生命周期）  \n                // ts 一周\n                // 组件库\n                // 更新逻辑\n                const prevTree = instance.subTree;\n                let proxyToUse = instance.proxy;\n                const nextTree = instance.render.call(proxyToUse, proxyToUse);\n\n                patch(prevTree, nextTree, container)\n            }\n        }, {\n            scheduler: queueJob\n        });\n    }\n    const mountComponent = (initialVNode, container) => {\n        // 组件的渲染流程  最核心的就是调用 setup拿到返回值，获取render函数返回的结果来进行渲染 \n        // 1.先有实例\n        const instance = (initialVNode.component = createComponentInstance(initialVNode))\n        // 2.需要的数据解析到实例上\n        setupComponent(instance); // state props attrs render ....\n        // 3.创建一个effect 让render函数执行\n        setupRenderEfect(instance, container);\n    }\n    const processComponent = (n1, n2, container) => {\n        if (n1 == null) { // 组件没有上一次的虚拟节点\n            mountComponent(n2, container);\n        } else {\n            // 组件更新流程 \n        }\n    }\n    // ------------------组件 ------------------\n\n\n    //----------------- 处理元素-----------------\n    const mountChildren = (children, container) => {\n        for (let i = 0; i < children.length; i++) {\n\n            let child = normalizeVNode(children[i]);\n            patch(null, child, container);\n        }\n    }\n    const mountElement = (vnode, container, anchor = null) => {\n        // 递归渲染\n        const { props, shapeFlag, type, children } = vnode;\n        let el = (vnode.el = hostCreateElement(type));\n\n        if (props) {\n            for (const key in props) {\n                hostPatchProp(el, key, null, props[key]);\n            }\n        }\n        if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {\n            hostSetElementText(el, children);// 文本比较简单 直接扔进去即可\n        } else if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {\n            mountChildren(children, el);\n        }\n        hostInsert(el, container, anchor);\n    }\n\n    const patchProps = (oldProps, newProps, el) => {\n        if (oldProps !== newProps) {\n            for (let key in newProps) {\n                const prev = oldProps[key]\n                const next = newProps[key];\n                if (prev !== next) {\n                    hostPatchProp(el, key, prev, next);\n                }\n            }\n            for (const key in oldProps) {\n                if (!(key in newProps)) {\n                    hostPatchProp(el, key, oldProps[key], null);\n                }\n            }\n        }\n    }\n    const patchKeyedChildren = (c1, c2, el) => {\n        // Vue3 对特殊情况进行优化\n\n        let i = 0; // 都是默认从头开始比对 \n        let e1 = c1.length - 1;\n        let e2 = c2.length - 1;\n\n        // 尽可能较少比对的区域\n\n        // sync from start 从头开始一个个比 遇到不同的就停止了\n        while (i <= e1 && i <= e2) {\n            const n1 = c1[i];\n            const n2 = c2[i];\n            if (isSameVNodeType(n1, n2)) {\n                patch(n1, n2, el);\n            } else {\n                break;\n            }\n            i++;\n        }\n        // sync from end\n        while (i <= e1 && i <= e2) {\n            const n1 = c1[e1];\n            const n2 = c2[e2];\n            if (isSameVNodeType(n1, n2)) {\n                patch(n1, n2, el);\n            } else {\n                break;\n            }\n            e1--;\n            e2--;\n        }\n\n        // common sequence + mount  有一方已经完全比对完成了\n        // 比较后 \n        // 怎么确定是要挂载呢？\n\n        // 如果完成后 最终i的值大于e1 说明老的少\n\n        if (i > e1) { // 老的少 新的多   有一方已经完全比对完成了 \n            if (i <= e2) { // 表示有新增的部分\n                const nextPos = e2 + 1;\n                // 想知道是向前插入 还是向后插入\n                const anchor = nextPos < c2.length ? c2[nextPos].el : null;\n                while (i <= e2) {\n                    patch(null, c2[i], el, anchor); // 只是向后追加\n                    i++;\n                }\n            }\n        } else if (i > e2) { // 老的多新的少    有一方已经完全比对完成了\n            while (i <= e1) {\n                unmount(c1[i]);\n                i++;\n            }\n        } else {\n            // 乱序比较 ， 需要尽可能复用  用新的元素做成一个映射表去老的里找，一样的就复用， 不一样的要不插入 要不删除\n\n            let s1 = i;\n            let s2 = i;\n            \n            // vue3 用的是新的做的映射表 vue2 用的是老的做的映射表\n            const keyToNewIndexMap = new Map();\n\n            for(let i = s2; i <= e2; i++){\n                const childVNode = c2[i]; // child\n                keyToNewIndexMap.set(childVNode.key,i);\n            }\n\n            // 去老的里面查找 看用没有复用的\n            for(let i = s1; i<=e1 ;i++){\n                const oldVnode = c1[i];\n                let newIndex = keyToNewIndexMap.get(oldVnode.key);\n                if(newIndex === undefined){ // 老的里的不在新的中\n                    unmount(oldVnode);\n                } else{ // 新老的比对 , 比较完毕后位置有差异\n                    patch(oldVnode,c2[newIndex],el);\n                }\n            }\n\n            // 最后就是移动节点，并且将新增的节点插入\n            // 最长递增子序列\n        }\n    }\n\n\n    const unmountChildren = (children) => {\n        for (let i = 0; i < children.length; i++) {\n            unmount(children[i])\n        }\n    }\n    const patchChildren = (n1, n2, el) => {\n        const c1 = n1.children; // 新老儿子\n        const c2 = n2.children;\n\n        // 老的有儿子 新的没儿子  新的有儿子老的没儿子  新老都有儿子  新老都是文本\n\n        const prevShapeFlag = n1.shapeFlag;\n        const shapeFlag = n2.shapeFlag;  // 分别标识过儿子的状况\n        if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {  // case1:现在是文本之前是数组\n            // 老的是n个孩子 但是新的是文本\n            if (prevShapeFlag & ShapeFlags.ARRAY_CHILDREN) {\n                unmountChildren(c1); // 如果c1 中包含组件会调用组件的销毁方法\n            }\n            // 两个人都是文本情况\n            if (c2 !== c1) { // case2：两个都是文本\n                hostSetElementText(el, c2)\n            }\n        } else {\n            // 现在是数组   上一次有可能是文本 或者数组\n            if (prevShapeFlag & ShapeFlags.ARRAY_CHILDREN) { // case3:两个都是数组\n                if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {\n                    // 当前是数组 之前是数组\n                    // 两个数组的比对  -》 diff算法  ***********************\n\n                    patchKeyedChildren(c1, c2, el);\n\n                } else {\n                    // 没有孩子  特殊情况 当前是null ， 删除掉老的\n                    unmountChildren(c1);\n                }\n            } else {\n                // 上一次是文本\n                if (prevShapeFlag & ShapeFlags.TEXT_CHILDREN) { // case4 现在是数组 之前是文本\n                    hostSetElementText(el, '');\n                }\n                if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {\n                    mountChildren(c2, el);\n                }\n            }\n        }\n    }\n    const patchElement = (n1, n2, container) => {\n        // 元素是相同节点\n        let el = (n2.el = n1.el);\n\n        // 更新属性  更新儿子\n        const oldProps = n1.props || {};\n        const newProps = n2.props || {};\n\n        patchProps(oldProps, newProps, el);\n\n        patchChildren(n1, n2, el);\n    }\n    const processElement = (n1, n2, container, anchor) => {\n        if (n1 == null) {\n            mountElement(n2, container, anchor);\n        } else {\n            patchElement(n1, n2, container);\n        }\n    }\n    //----------------- 处理元素-----------------\n\n    // -----------------文本处理-----------------\n    const processText = (n1, n2, container) => {\n        if (n1 == null) {\n            hostInsert((n2.el = hostCreateText(n2.children)), container)\n        }\n    }\n    // -----------------文本处理-----------------\n\n    const isSameVNodeType = (n1, n2) => {\n        return n1.type === n2.type && n1.key === n2.key;\n    }\n    const unmount = (n1) => { // 如果是组件 调用的组件的生命周期等\n\n        hostRemove(n1.el)\n    }\n    const patch = (n1, n2, container, anchor = null) => {\n        // 针对不同类型 做初始化操作\n        const { shapeFlag, type } = n2;\n\n        if (n1 && !isSameVNodeType(n1, n2)) {\n            // 把以前的删掉 换成n2\n            anchor = hostNextSibling(n1.el);\n            unmount(n1);\n            n1 = null; // 重新渲染n2 对应的内容\n        }\n\n        switch (type) {\n            case Text:\n                processText(n1, n2, container);\n                break;\n            default:\n                if (shapeFlag & ShapeFlags.ELEMENT) {\n                    processElement(n1, n2, container, anchor);\n                } else if (shapeFlag & ShapeFlags.STATEFUL_COMPONENT) {\n                    processComponent(n1, n2, container);\n                }\n        }\n\n    }\n    const render = (vnode, container) => {\n        // core的核心, 根据不同的虚拟节点 创建对应的真实元素\n\n        // 默认调用render 可能是初始化流程\n        patch(null, vnode, container)\n    }\n    return {\n        createApp: createAppAPI(render)\n    }\n}\n// createRenderer 目的是创建一个渲染器\n\n// 框架 都是将组件 转化成虚拟DOM -》 虚拟DOM生成真实DOM挂载到真实页面上","import { isArray, isObject } from \"@vue/shared/src\";\nimport { createVNode, isVnode } from \"./vnode\";\n\n\nexport function h(type, propsOrChildren, children) {\n    const l = arguments.length; // 儿子节点要么是字符串 要么是数组 针对的是createVnode\n    if (l == 2) { // 类型 + 属性 、  类型 + 孩子 \n        // 如果propsOrChildren 是数组 直接作为第三个参数\n        if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {\n            if(isVnode(propsOrChildren)){\n                return createVNode(type,null,[propsOrChildren]);\n            }\n            return createVNode(type,propsOrChildren)\n        } else {\n            // 如果第二个参数 不是对象 那一定是孩子\n            return createVNode(type, null, propsOrChildren);\n        }\n    }else{\n        if(l > 3){\n            children = Array.prototype.slice.call(arguments,2);\n        }else if(l === 3 && isVnode(children)){\n            children = [children]\n        }\n        return createVNode(type,propsOrChildren,children);\n    }\n}","// runtime-dom 核心就是  提供domAPI方法了\n//操作节点、操作属性的更新\n\nimport { extend } from \"@vue/shared/src\";\nimport { nodeOps } from \"./nodeOps\"; // 对象\nimport { patchProp } from \"./patchProp\"; // 方法\nimport {createRenderer} from '@vue/runtime-core'\n\n// 节点操作就是增删改查 \n// 属性操作 添加 删除 更新 (样式、类、事件、其他属性)\n\n\n// 渲染时用到的所有方法\nconst rendererOptions = extend({ patchProp }, nodeOps)\n\n// vue中runtime-core 提供了核心的方法 用来处理渲染的，他会使用runtime-dom中的api进行渲染\nexport function createApp(rootComponent, rootProps = null) {\n    const app = createRenderer(rendererOptions).createApp(rootComponent,rootProps)\n    let {mount} = app\n    app.mount = function (container) {\n        // 清空容器的操作 \n        container = nodeOps.querySelector(container);\n        container.innerHTML = '';\n        mount(container); // 函数劫持\n        // 将组件 渲染成dom元素 进行挂载\n    }\n    return app;\n}\n\n\n\nexport * from '@vue/runtime-core';\n\n// 用户调用的是runtime-dom  -> runtime-core \n// runtime-dom 是为了解决平台差异 （浏览器的）\n"],"names":[],"mappings":"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"}