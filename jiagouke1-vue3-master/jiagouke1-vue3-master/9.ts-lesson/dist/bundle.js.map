{"version":3,"file":"bundle.js","sources":["../src/index.ts"],"sourcesContent":["// export import语法 ESModule\n// require module.exports  commonjs\n\n\n// rollup默认只支持es6语法 只有es6模块才能做treeshaking\n\n\n// import a from  './cjs'\n// import r  = require('fs'); // commonjs语法的require语法是没有类型提示的\n\n\n\n// ts 为了支持commonjs语法 单独的提出了一个导出方式  export =  / import x = require('')\n// 用ts的时候除非你引入的模块 他不是ts写的我们可以使用require 直接用\n// 如果模块用ts写的 那就需要import x = require('xx')\n// 如果要是es6模块 全部用 export default export {} / import 即可\n\n\n// es6模块和commonjs模块不兼容  有可能人家的包是commonjs打包出的结果，es6引入会出问题\n// 为了解决这个问题 才生成了新的语法export = \n\n// ---------------------------\n\n// 有的时候在开发时引入了一些第三方模块 会发现他们不是ts写的\n\n// declare module 'jquery';\nimport jquery from 'jquery';// 有个组织 @types/\n// 通过declare来声明变量，这个声明只是为了避免报错的 没有任何意义\n\n\njquery.fn.extend()\njquery('xxx').height('100');\n\n\n// import a from 'a.vue';\n\n// let tomato:tomato = {\n//     color:'red'\n// }\n\n\n// unknown 是any的安全类型\n\nlet u: unknown = 1; // unkown 不能通过属性变量取值 为了安全性\n\n// unknown和其他类型在联合类型都是unknown类型\n// unknow 和其他类型 交叉类型都是其他类型\ntype x = boolean & unknown\n\n// keyof any 但是不能用 keyof unknown\n\ntype s = keyof any;\n\n\n\n\n// 回顾了之前核心ts的api Omit Partial Exclude Extract...\n// 命名空间 声明文件 模块导入导出 import export / export = import xx = \nexport { }"],"names":["jquery"],"mappings":";;;;;;;CAAA;CA2BA;AAGAA,2BAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAA;AAClBA,2BAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;;;;;;"}