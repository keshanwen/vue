{"version":3,"file":"reactivity.global.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/baseHandlers.ts","../src/reactive.ts","../src/ref.ts","../src/computed.ts"],"sourcesContent":["export const isObject = (value) => typeof value == 'object' && value !== null;\r\nexport const extend = Object.assign;\r\nexport const isArray = Array.isArray;\r\nexport const isFunction = (value) => typeof value == 'function';\r\nexport const isNumber = (value) => typeof value == 'number';\r\nexport const isString = (value) => typeof value === 'string';\r\nexport const isIntegerKey = (key) => parseInt(key) + '' === key;\r\n\r\nlet hasOwnpRroperty = Object.prototype.hasOwnProperty;\r\nexport const hasOwn = (target, key) => hasOwnpRroperty.call(target, key);\r\n\r\nexport const hasChanged = (oldValue, value) => oldValue !== value;\r\n","import { isArray, isIntegerKey } from '@vue/shared/src';\r\nimport { TriggerOrTypes } from './operators';\r\n\r\nexport function effect(fn, options: any = {}) {\r\n  // 我需要让这个effect变成响应的effect，可以做到数据变化重新执行\r\n  const effect = createReactiveEffect(fn, options);\r\n  if (!options.lazy) {\r\n    // 默认的effect会先执行\r\n    effect(); // 响应式的effect默认会先执行一次\r\n  }\r\n  return effect;\r\n}\r\nlet uid = 0;\r\nlet activeEffect; // 存储当前的effect\r\nconst effectStack = [];\r\nfunction createReactiveEffect(fn, options) {\r\n  const effect = function reactiveEffect() {\r\n    if (!effectStack.includes(effect)) {\r\n      // 保证effect没有加入到effectStack中\r\n      try {\r\n        effectStack.push(effect);\r\n        activeEffect = effect;\r\n        return fn(); // 函数执行时会取值  会执行get方法\r\n      } finally {\r\n        effectStack.pop();\r\n        activeEffect = effectStack[effectStack.length - 1];\r\n      }\r\n    }\r\n  };\r\n  effect.id = uid++; // 制作一个effect标识 用于区分effect\r\n  effect._isEffect = true; // 用于标识这个是响应式effect\r\n  effect.raw = fn; // 保留effect对应的原函数\r\n  effect.options = options; // 在effect上保存用户的属性\r\n  return effect;\r\n}\r\n// 让，某个对象中的属性 收集当前他对应的effect函数\r\nconst targetMap = new WeakMap();\r\nexport function track(target, type, key) {\r\n  // 可以拿到当前的effect\r\n  //  activeEffect; // 当前正在运行的effect\r\n  if (activeEffect === undefined) {\r\n    // 此属性不用收集依赖，因为没在effect中使用\r\n    return;\r\n  }\r\n  let depsMap = targetMap.get(target);\r\n  if (!depsMap) {\r\n    targetMap.set(target, (depsMap = new Map()));\r\n  }\r\n  let dep = depsMap.get(key);\r\n  if (!dep) {\r\n    depsMap.set(key, (dep = new Set()));\r\n  }\r\n  if (!dep.has(activeEffect)) {\r\n    dep.add(activeEffect);\r\n  }\r\n}\r\n\r\n// 找属性对应的effect 让其执行 （数组、对象）\r\nexport function trigger(target, type, key?, newValue?, oldValue?) {\r\n  // 如果这个属性没有 收集过effect，那不需要做任何操作\r\n  const depsMap = targetMap.get(target);\r\n  if (!depsMap) return;\r\n\r\n  const effects = new Set(); // 这里对effect去重了\r\n  const add = (effectsToAdd) => {\r\n    if (effectsToAdd) {\r\n      effectsToAdd.forEach((effect) => effects.add(effect));\r\n    }\r\n  };\r\n  // 我要将所有的 要执行的effect 全部存到一个新的集合中，最终一起执行\r\n\r\n  // 1. 看修改的是不是数组的长度 因为改长度影响比较大\r\n  if (key === 'length' && isArray(target)) {\r\n    // 如果对应的长度 有依赖收集需要更新\r\n    depsMap.forEach((dep, key) => {\r\n      if (key === 'length' || key > newValue) {\r\n        // 如果更改的长度 小于收集的索引，那么这个索引也需要触发effect重新执行\r\n        add(dep);\r\n      }\r\n    });\r\n  } else {\r\n    // 可能是对象\r\n    if (key !== undefined) {\r\n      // 这里肯定是修改， 不能是新增\r\n      add(depsMap.get(key)); // 如果是新增\r\n    }\r\n    // 如果修改数组中的 某一个索引 怎么办？\r\n    switch (\r\n      type // 如果添加了一个索引就触发长度的更新\r\n    ) {\r\n      case TriggerOrTypes.ADD:\r\n        if (isArray(target) && isIntegerKey(key)) {\r\n          add(depsMap.get('length'));\r\n        }\r\n    }\r\n  }\r\n  effects.forEach((effect: any) => {\r\n    if (effect.options.scheduler) {\r\n      effect.options.scheduler(effect)\r\n    } else {\r\n      effect()\r\n    }\r\n  });\r\n}\r\n// weakMap {name:'zf',age:12}  (map) =>{name => set(effect),age => set(effect)}\r\n// {name:'zf',age:12} => name => [effect effect]\r\n\r\n// 函数调用是一个栈型结构\r\n// effect(()=>{ // effect1   [effect1]\r\n//     state.name -> effect1\r\n//     effect(()=>{ // effect2\r\n//         state.age -> effect2\r\n//     })\r\n//     state.address -> effect1\r\n// })\r\n","// 实现 new Proxy(target, handler)\r\n\r\nimport {\r\n  extend,\r\n  hasChanged,\r\n  hasOwn,\r\n  isArray,\r\n  isIntegerKey,\r\n  isObject,\r\n} from '@vue/shared/src';\r\nimport { track, trigger } from './effect';\r\nimport { TrackOpTypes, TriggerOrTypes } from './operators';\r\nimport { reactive, readonly } from './reactive';\r\n\r\nconst get = createGetter();\r\nconst shallowGet = createGetter(false, true);\r\nconst readonlyGet = createGetter(true);\r\nconst showllowReadonlyGet = createGetter(true, true);\r\nconst set = createSetter();\r\nconst shallowSet = createSetter(true);\r\nexport const mutableHandlers = {\r\n  get,\r\n  set,\r\n};\r\nexport const shallowReactiveHandlers = {\r\n  get: shallowGet,\r\n  set: shallowSet,\r\n};\r\n\r\nlet readonlyObj = {\r\n  set: (target, key) => {\r\n    console.warn(`set on key ${key} falied`);\r\n  },\r\n};\r\nexport const readonlyHandlers = extend(\r\n  {\r\n    get: readonlyGet,\r\n  },\r\n  readonlyObj\r\n);\r\nexport const shallowReadonlyHandlers = extend(\r\n  {\r\n    get: showllowReadonlyGet,\r\n  },\r\n  readonlyObj\r\n);\r\n\r\n// 是不是仅读的，仅读的属性set时会报异常\r\n// 是不是深度的\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n  // 拦截获取功能\r\n  return function get(target, key, receiver) {\r\n    // let proxy = reactive({obj:{}})\r\n    // proxy + reflect\r\n    // 后续Object上的方法 会被迁移到Reflect Reflect.getProptypeof()\r\n    // 以前target[key] = value 方式设置值可能会失败 ， 并不会报异常 ，也没有返回值标识\r\n    // Reflect 方法具备返回值\r\n    // reflect 使用可以不使用 proxy es6语法\r\n\r\n    const res = Reflect.get(target, key, receiver); // target[key];\r\n    if (!isReadonly) {\r\n      // 收集依赖，等会数据变化后更新对应的视图\r\n      console.log('执行effect时会取值', '收集effect');\r\n\r\n      track(target, TrackOpTypes.GET, key);\r\n    }\r\n    if (shallow) {\r\n      return res;\r\n    }\r\n    if (isObject(res)) {\r\n      // vue2 是一上来就递归，vue3 是当取值时会进行代理 。 vue3的代理模式是懒代理\r\n      return isReadonly ? readonly(res) : reactive(res);\r\n    }\r\n    return res;\r\n  };\r\n}\r\nfunction createSetter(shallow = false) {\r\n  // 蓝爵设置功能\r\n  return function set(target, key, value, receiver) {\r\n    const oldValue = target[key]; // 获取老的值\r\n\r\n    let hadKey =\r\n      isArray(target) && isIntegerKey(key)\r\n        ? Number(key) < target.length\r\n        : hasOwn(target, key);\r\n\r\n    const result = Reflect.set(target, key, value, receiver); // target[key] = value\r\n\r\n    if (!hadKey) {\r\n      // 新增\r\n      trigger(target, TriggerOrTypes.ADD, key, value);\r\n    } else if (hasChanged(oldValue, value)) {\r\n      // 修改\r\n      trigger(target, TriggerOrTypes.SET, key, value, oldValue);\r\n    }\r\n\r\n    // 我们要区分是新增的 还是修改的  vue2 里无法监控更改索引，无法监控数组的长度变化  -》 hack的方法 需要特殊处理\r\n\r\n    // 当数据更新时 通知对应属性的effect重新执行\r\n\r\n    return result;\r\n  };\r\n}\r\n","import { isObject } from '@vue/shared';\r\nimport {\r\n  mutableHandlers,\r\n  shallowReactiveHandlers,\r\n  readonlyHandlers,\r\n  shallowReadonlyHandlers,\r\n} from './baseHandlers';\r\nexport function reactive(target) {\r\n  return createReactiveObject(target, false, mutableHandlers);\r\n}\r\nexport function shallowReactive(target) {\r\n  return createReactiveObject(target, false, shallowReactiveHandlers);\r\n}\r\n\r\nexport function readonly(target) {\r\n  return createReactiveObject(target, true, readonlyHandlers);\r\n}\r\n\r\nexport function shallowReadonly(target) {\r\n  return createReactiveObject(target, true, shallowReadonlyHandlers);\r\n}\r\n\r\n// 是不是仅读 是不是深度， 柯里化  new Proxy() 最核心的需要拦截 数据的读取和数据的修改  get set\r\nconst reactiveMap = new WeakMap(); // 会自动垃圾回收，不会造成内存泄漏， 存储的key只能是对象\r\nconst readonlyMap = new WeakMap();\r\nexport function createReactiveObject(target, isReadonly, baseHandlers) {\r\n  // 如果目标不是对象 没法拦截了，reactive这个api只能拦截对象类型\r\n  if (!isObject(target)) {\r\n    return target;\r\n  }\r\n  // 如果某个对象已经被代理过了 就不要再次代理了  可能一个对象 被代理是深度 又被仅读代理了\r\n  const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n  const existProxy = proxyMap.get(target);\r\n  if (existProxy) {\r\n    return existProxy; // 如果已经被代理了 直接返回即可\r\n  }\r\n  const proxy = new Proxy(target, baseHandlers);\r\n  proxyMap.set(target, proxy); // 将要代理的对象 和对应代理结果缓存起来\r\n\r\n  return proxy;\r\n}\r\n","import { hasChanged, isArray, isObject } from '@vue/shared/src';\r\nimport { track, trigger } from './effect';\r\nimport { TrackOpTypes, TriggerOrTypes } from './operators';\r\nimport { reactive } from './reactive';\r\n\r\nexport function ref(value) {\r\n  // 将普通类型 变成一个对象 , 可以是对象 但是一般情况下是对象直接用reactive更合理\r\n  return createRef(value);\r\n}\r\n\r\n// ref 和 reactive的区别 reactive内部采用proxy  ref中内部使用的是defineProperty\r\n\r\nexport function shallowRef(value) {\r\n  return createRef(value, true);\r\n}\r\n\r\n// 后续 看vue的源码 基本上都是高阶函数 做了类似柯里化的功能\r\n\r\nconst convert = (val) => (isObject(val) ? reactive(val) : val);\r\n// beta 版本 之前的版本ref 就是个对象 ，由于对象不方便扩展 改成了类\r\nclass RefImpl {\r\n  public _value; //表示 声明了一个_value属性 但是没有赋值\r\n  public __v_isRef = true; // 产生的实例会被添加 __v_isRef 表示是一个ref属性\r\n  constructor(public rawValue, public shallow) {\r\n    // 参数中前面增加修饰符 标识此属性放到了实例上\r\n    this._value = shallow ? rawValue : convert(rawValue); // 如果是深度 需要把里面的都变成响应式的\r\n  }\r\n  // 类的属性访问器\r\n  get value() {\r\n    // 代理 取值取value 会帮我们代理到 _value上\r\n    track(this, TrackOpTypes.GET, 'value');\r\n    return this._value;\r\n  }\r\n  set value(newValue) {\r\n    if (hasChanged(newValue, this.rawValue)) {\r\n      // 判断老值和新值是否有变化\r\n      this.rawValue = newValue; // 新值会作为老值\r\n      this._value = this.shallow ? newValue : convert(newValue);\r\n      trigger(this, TriggerOrTypes.SET, 'value', newValue);\r\n    }\r\n  }\r\n}\r\nfunction createRef(rawValue, shallow = false) {\r\n  return new RefImpl(rawValue, shallow);\r\n}\r\n\r\nclass ObjectRefImpl {\r\n  public __v_isRef = true;\r\n  constructor(public target, public key) {}\r\n  get value() {\r\n    // 代理\r\n    return this.target[this.key]; // 如果原对象是响应式的就会依赖收集\r\n  }\r\n  set value(newValue) {\r\n    this.target[this.key] = newValue; // 如果原来对象是响应式的 那么就会触发更新\r\n  }\r\n}\r\n// promisify\r\n// promisifyAll\r\n\r\n// 将某一个key对应的值 转化成ref\r\nexport function toRef(target, key) {\r\n  // 可以把一个对象的值转化成 ref类型\r\n  return new ObjectRefImpl(target, key);\r\n}\r\n\r\nexport function toRefs(object) {\r\n  // object 可能传递的是一个数组 或者对象\r\n  const ret = isArray(object) ? new Array(object.length) : {};\r\n  for (let key in object) {\r\n    ret[key] = toRef(object, key);\r\n  }\r\n  return ret;\r\n}\r\n","import { isFunction } from \"@vue/shared/src\";\r\nimport { effect, track, trigger } from \"./effect\";\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\";\r\n// 作业：调试 collectionHandlers ref 的api 和 computed\r\nclass ComputedRefImpl{\r\n    public _dirty = true; // 默认取值时不要用缓存\r\n    public _value;\r\n    public effect;\r\n    constructor(getter,public setter){ // ts 中默认不会挂载到this上\r\n        this.effect = effect(getter,{\r\n            lazy:true, // 默认不执行\r\n            scheduler:()=>{\r\n                if(!this._dirty){\r\n                    this._dirty = true;\r\n                    trigger(this,TriggerOrTypes.SET,'value')\r\n                }\r\n            }\r\n        })\r\n    }\r\n    get value(){ // 计算属性也要收集依赖\r\n        if(this._dirty){\r\n            this._value = this.effect(); // 会将用户的反回值返回\r\n            this._dirty = false;\r\n        }\r\n        track(this,TrackOpTypes.GET,'value')\r\n        return this._value;\r\n    }\r\n    set value(newValue){\r\n        this.setter(newValue)\r\n    }\r\n}\r\n\r\n// vue2 和 vue3 computed原理是不一样的\r\nexport function computed(getterOrOptions){\r\n    let getter;\r\n    let setter;\r\n\r\n\r\n    if(isFunction(getterOrOptions)){\r\n        getter = getterOrOptions;\r\n        setter = () =>{\r\n            console.warn('computed value must be readonly')\r\n        }\r\n    }else{\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n\r\n    return new ComputedRefImpl(getter,setter)\r\n\r\n}"],"names":[],"mappings":"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"}