{"version":3,"file":"runtime-dom.global.js","sources":["../../shared/src/index.ts","../src/nodeOps.ts","../src/modules/attr.ts","../src/modules/class.ts","../src/modules/events.ts","../src/modules/style.ts","../src/patchProp.ts","../../reactivity/src/effect.ts","../../reactivity/src/baseHandlers.ts","../../reactivity/src/reactive.ts","../../reactivity/src/ref.ts","../../reactivity/src/computed.ts","../../runtime-core/src/vnode.ts","../../runtime-core/src/apiCreateApp.ts","../../runtime-core/src/componentPublicInstance.ts","../../runtime-core/src/component.ts","../../runtime-core/src/scheduler.ts","../../runtime-core/src/renderer.ts","../../runtime-core/src/h.ts","../src/index.ts"],"sourcesContent":["export const isObject = (value) => typeof value == 'object' && value !== null;\r\nexport const extend = Object.assign;\r\nexport const isArray = Array.isArray;\r\nexport const isFunction = (value) => typeof value == 'function';\r\nexport const isNumber = (value) => typeof value == 'number';\r\nexport const isString = (value) => typeof value === 'string';\r\nexport const isIntegerKey = (key) => parseInt(key) + '' === key;\r\n\r\nlet hasOwnpRroperty = Object.prototype.hasOwnProperty;\r\nexport const hasOwn = (target, key) => hasOwnpRroperty.call(target, key);\r\n\r\nexport const hasChanged = (oldValue, value) => oldValue !== value;\r\n\r\nexport * from './shapeFlag'\r\n","export const nodeOps = {\r\n    // createElement, 不同的平台创建元素方式不同\r\n    // 元素\r\n    createElement: tagName => document.createElement(tagName), // 增加\r\n    remove: child => { // 删除\r\n        const parent = child.parentNode;\r\n        if (parent) {\r\n            parent.removeChild(child)\r\n        }\r\n    },\r\n    insert: (child, parent, anchor = null) => { // 插入\r\n        parent.insertBefore(child, anchor); // 如果参照物为空 则相当于appendChild\r\n    },\r\n    querySelector: selector => document.querySelector(selector),\r\n    setElementText: (el, text) => el.textContent = text,\r\n    // 文本操作 创建文本\r\n    createText: text => document.createTextNode(text),\r\n    setText: (node, text) => node.nodeValue = text\r\n}\r\n\r\n","\r\n\r\nexport const patchAttr = (el,key,value) =>{\r\n    if(value == null){\r\n        el.removeAttribute(key);\r\n    }else {\r\n        el.setAttribute(key,value);\r\n    }\r\n}","\r\n\r\nexport const patchClass = (el,value) =>{\r\n    if(value == null){\r\n        value = '';\r\n    }\r\n    el.className = value\r\n}","// 1.给元素缓存一个绑定事件的列表\r\n// 2.如果缓存中没有缓存过的，而且value有值 需要绑定方法，并且缓存起来\r\n// 3.以前绑定过需要删除掉，删除缓存\r\n// 4.如果前后都有，直接改变invoker中value属性指向最新的事件 即可\r\nexport const patchEvent = (el,key,value) =>{ // vue指令 删除和添加\r\n    // 对函数的缓存\r\n    const invokers = el._vei || (el._vei = {});\r\n    const exists = invokers[key]; // 如果不存在\r\n    if(value && exists){ // 需要绑定事件 而且还存在的情况下\r\n        exists.value = value;\r\n    }else{\r\n        const eventName = key.slice(2).toLowerCase();\r\n        if(value){ // 要绑定事件 以前没有绑定过\r\n            let invoker = invokers[key] = createInvoker(value);\r\n            el.addEventListener(eventName,invoker)\r\n        }else{ // 以前绑定了 当时没有value\r\n            el.removeEventListener(eventName,exists);\r\n            invokers[key] = undefined;\r\n        }\r\n    }\r\n}\r\nfunction createInvoker(value){\r\n    const invoker = (e) =>{ invoker.value(e);}\r\n    invoker.value = value; // 为了能随时更改value属性\r\n    return invoker;\r\n}\r\n\r\n// 一个元素 绑定事件  addEventListener(fn) addEventListener(fn1)\r\n\r\n// value = fn\r\n// div @click=\"fn\"  ()=> value()\r\n\r\n// div","export const patchStyle = (el,prev,next) =>{ // cssText;\r\n    const style = el.style; //获取样式\r\n    if(next == null){\r\n        el.removeAttribute('style') // {style:{}}  {}\r\n    }else{\r\n        // 老的里新的有没有\r\n        if(prev){  // {style:{color}} => {style:{background}}\r\n            for(let key in prev){\r\n                if(next[key] == null){ // 老的里有 新的里没有 需要删除\r\n                    style[key] = '';\r\n                }\r\n            }\r\n        }\r\n        // 新的里面需要赋值到style上\r\n        for(let key in next){ // {style:{color}} => {style:{background}}\r\n            style[key] = next[key];\r\n        }\r\n    }\r\n\r\n}","// 这个里面针对的是属性操作，一系列的属性操作\r\n\r\nimport { patchAttr } from \"./modules/attr\";\r\nimport { patchClass } from \"./modules/class\";\r\nimport { patchEvent } from \"./modules/events\";\r\nimport { patchStyle } from \"./modules/style\";\r\n\r\n\r\nexport const patchProp = (el,key,prevValue,nextValue) => {\r\n    switch (key) {\r\n        case 'class':\r\n            patchClass(el,nextValue); // 比对属性\r\n            break;\r\n        case 'style': // {style:{color:'red'}}  {style:{background:'red'}}\r\n            patchStyle(el,prevValue,nextValue);\r\n            break;\r\n        default:\r\n            // 如果不是事件 才是属性\r\n            if(/^on[^a-z]/.test(key)){\r\n                patchEvent(el,key,nextValue); // 事件就是添加和删除 修改\r\n            }else{\r\n                patchAttr(el,key,nextValue);\r\n            }\r\n\r\n            break;\r\n    }\r\n}\r\n","import { isArray, isIntegerKey } from '@vue/shared/src';\r\nimport { TriggerOrTypes } from './operators';\r\n\r\nexport function effect(fn, options: any = {}) {\r\n  // 我需要让这个effect变成响应的effect，可以做到数据变化重新执行\r\n  const effect = createReactiveEffect(fn, options);\r\n  if (!options.lazy) {\r\n    // 默认的effect会先执行\r\n    effect(); // 响应式的effect默认会先执行一次\r\n  }\r\n  return effect;\r\n}\r\nlet uid = 0;\r\nlet activeEffect; // 存储当前的effect\r\nconst effectStack = [];\r\nfunction createReactiveEffect(fn, options) {\r\n  const effect = function reactiveEffect() {\r\n    if (!effectStack.includes(effect)) {\r\n      // 保证effect没有加入到effectStack中\r\n      try {\r\n        effectStack.push(effect);\r\n        activeEffect = effect;\r\n        return fn(); // 函数执行时会取值  会执行get方法\r\n      } finally {\r\n        effectStack.pop();\r\n        activeEffect = effectStack[effectStack.length - 1];\r\n      }\r\n    }\r\n  };\r\n  effect.id = uid++; // 制作一个effect标识 用于区分effect\r\n  effect._isEffect = true; // 用于标识这个是响应式effect\r\n  effect.raw = fn; // 保留effect对应的原函数\r\n  effect.options = options; // 在effect上保存用户的属性\r\n  return effect;\r\n}\r\n// 让，某个对象中的属性 收集当前他对应的effect函数\r\nconst targetMap = new WeakMap();\r\nexport function track(target, type, key) {\r\n  // 可以拿到当前的effect\r\n  //  activeEffect; // 当前正在运行的effect\r\n  if (activeEffect === undefined) {\r\n    // 此属性不用收集依赖，因为没在effect中使用\r\n    return;\r\n  }\r\n  let depsMap = targetMap.get(target);\r\n  if (!depsMap) {\r\n    targetMap.set(target, (depsMap = new Map()));\r\n  }\r\n  let dep = depsMap.get(key);\r\n  if (!dep) {\r\n    depsMap.set(key, (dep = new Set()));\r\n  }\r\n  if (!dep.has(activeEffect)) {\r\n    dep.add(activeEffect);\r\n  }\r\n}\r\n\r\n// 找属性对应的effect 让其执行 （数组、对象）\r\nexport function trigger(target, type, key?, newValue?, oldValue?) {\r\n  // 如果这个属性没有 收集过effect，那不需要做任何操作\r\n  const depsMap = targetMap.get(target);\r\n  if (!depsMap) return;\r\n\r\n  const effects = new Set(); // 这里对effect去重了\r\n  const add = (effectsToAdd) => {\r\n    if (effectsToAdd) {\r\n      effectsToAdd.forEach((effect) => effects.add(effect));\r\n    }\r\n  };\r\n  // 我要将所有的 要执行的effect 全部存到一个新的集合中，最终一起执行\r\n\r\n  // 1. 看修改的是不是数组的长度 因为改长度影响比较大\r\n  if (key === 'length' && isArray(target)) {\r\n    // 如果对应的长度 有依赖收集需要更新\r\n    depsMap.forEach((dep, key) => {\r\n      if (key === 'length' || key > newValue) {\r\n        // 如果更改的长度 小于收集的索引，那么这个索引也需要触发effect重新执行\r\n        add(dep);\r\n      }\r\n    });\r\n  } else {\r\n    // 可能是对象\r\n    if (key !== undefined) {\r\n      // 这里肯定是修改， 不能是新增\r\n      add(depsMap.get(key)); // 如果是新增\r\n    }\r\n    // 如果修改数组中的 某一个索引 怎么办？\r\n    switch (\r\n      type // 如果添加了一个索引就触发长度的更新\r\n    ) {\r\n      case TriggerOrTypes.ADD:\r\n        if (isArray(target) && isIntegerKey(key)) {\r\n          add(depsMap.get('length'));\r\n        }\r\n    }\r\n  }\r\n  effects.forEach((effect: any) => {\r\n    if (effect.options.scheduler) {\r\n      effect.options.scheduler(effect)\r\n    } else {\r\n      effect()\r\n    }\r\n  });\r\n}\r\n// weakMap {name:'zf',age:12}  (map) =>{name => set(effect),age => set(effect)}\r\n// {name:'zf',age:12} => name => [effect effect]\r\n\r\n// 函数调用是一个栈型结构\r\n// effect(()=>{ // effect1   [effect1]\r\n//     state.name -> effect1\r\n//     effect(()=>{ // effect2\r\n//         state.age -> effect2\r\n//     })\r\n//     state.address -> effect1\r\n// })\r\n","// 实现 new Proxy(target, handler)\r\n\r\nimport {\r\n  extend,\r\n  hasChanged,\r\n  hasOwn,\r\n  isArray,\r\n  isIntegerKey,\r\n  isObject,\r\n} from '@vue/shared/src';\r\nimport { track, trigger } from './effect';\r\nimport { TrackOpTypes, TriggerOrTypes } from './operators';\r\nimport { reactive, readonly } from './reactive';\r\n\r\nconst get = createGetter();\r\nconst shallowGet = createGetter(false, true);\r\nconst readonlyGet = createGetter(true);\r\nconst showllowReadonlyGet = createGetter(true, true);\r\nconst set = createSetter();\r\nconst shallowSet = createSetter(true);\r\nexport const mutableHandlers = {\r\n  get,\r\n  set,\r\n};\r\nexport const shallowReactiveHandlers = {\r\n  get: shallowGet,\r\n  set: shallowSet,\r\n};\r\n\r\nlet readonlyObj = {\r\n  set: (target, key) => {\r\n    console.warn(`set on key ${key} falied`);\r\n  },\r\n};\r\nexport const readonlyHandlers = extend(\r\n  {\r\n    get: readonlyGet,\r\n  },\r\n  readonlyObj\r\n);\r\nexport const shallowReadonlyHandlers = extend(\r\n  {\r\n    get: showllowReadonlyGet,\r\n  },\r\n  readonlyObj\r\n);\r\n\r\n// 是不是仅读的，仅读的属性set时会报异常\r\n// 是不是深度的\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n  // 拦截获取功能\r\n  return function get(target, key, receiver) {\r\n    // let proxy = reactive({obj:{}})\r\n    // proxy + reflect\r\n    // 后续Object上的方法 会被迁移到Reflect Reflect.getProptypeof()\r\n    // 以前target[key] = value 方式设置值可能会失败 ， 并不会报异常 ，也没有返回值标识\r\n    // Reflect 方法具备返回值\r\n    // reflect 使用可以不使用 proxy es6语法\r\n\r\n    const res = Reflect.get(target, key, receiver); // target[key];\r\n    if (!isReadonly) {\r\n      // 收集依赖，等会数据变化后更新对应的视图\r\n      console.log('执行effect时会取值', '收集effect');\r\n\r\n      track(target, TrackOpTypes.GET, key);\r\n    }\r\n    if (shallow) {\r\n      return res;\r\n    }\r\n    if (isObject(res)) {\r\n      // vue2 是一上来就递归，vue3 是当取值时会进行代理 。 vue3的代理模式是懒代理\r\n      return isReadonly ? readonly(res) : reactive(res);\r\n    }\r\n    return res;\r\n  };\r\n}\r\nfunction createSetter(shallow = false) {\r\n  // 蓝爵设置功能\r\n  return function set(target, key, value, receiver) {\r\n    const oldValue = target[key]; // 获取老的值\r\n\r\n    let hadKey =\r\n      isArray(target) && isIntegerKey(key)\r\n        ? Number(key) < target.length\r\n        : hasOwn(target, key);\r\n\r\n    const result = Reflect.set(target, key, value, receiver); // target[key] = value\r\n\r\n    if (!hadKey) {\r\n      // 新增\r\n      trigger(target, TriggerOrTypes.ADD, key, value);\r\n    } else if (hasChanged(oldValue, value)) {\r\n      // 修改\r\n      trigger(target, TriggerOrTypes.SET, key, value, oldValue);\r\n    }\r\n\r\n    // 我们要区分是新增的 还是修改的  vue2 里无法监控更改索引，无法监控数组的长度变化  -》 hack的方法 需要特殊处理\r\n\r\n    // 当数据更新时 通知对应属性的effect重新执行\r\n\r\n    return result;\r\n  };\r\n}\r\n","import { isObject } from '@vue/shared';\r\nimport {\r\n  mutableHandlers,\r\n  shallowReactiveHandlers,\r\n  readonlyHandlers,\r\n  shallowReadonlyHandlers,\r\n} from './baseHandlers';\r\nexport function reactive(target) {\r\n  return createReactiveObject(target, false, mutableHandlers);\r\n}\r\nexport function shallowReactive(target) {\r\n  return createReactiveObject(target, false, shallowReactiveHandlers);\r\n}\r\n\r\nexport function readonly(target) {\r\n  return createReactiveObject(target, true, readonlyHandlers);\r\n}\r\n\r\nexport function shallowReadonly(target) {\r\n  return createReactiveObject(target, true, shallowReadonlyHandlers);\r\n}\r\n\r\n// 是不是仅读 是不是深度， 柯里化  new Proxy() 最核心的需要拦截 数据的读取和数据的修改  get set\r\nconst reactiveMap = new WeakMap(); // 会自动垃圾回收，不会造成内存泄漏， 存储的key只能是对象\r\nconst readonlyMap = new WeakMap();\r\nexport function createReactiveObject(target, isReadonly, baseHandlers) {\r\n  // 如果目标不是对象 没法拦截了，reactive这个api只能拦截对象类型\r\n  if (!isObject(target)) {\r\n    return target;\r\n  }\r\n  // 如果某个对象已经被代理过了 就不要再次代理了  可能一个对象 被代理是深度 又被仅读代理了\r\n  const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n  const existProxy = proxyMap.get(target);\r\n  if (existProxy) {\r\n    return existProxy; // 如果已经被代理了 直接返回即可\r\n  }\r\n  const proxy = new Proxy(target, baseHandlers);\r\n  proxyMap.set(target, proxy); // 将要代理的对象 和对应代理结果缓存起来\r\n\r\n  return proxy;\r\n}\r\n","import { hasChanged, isArray, isObject } from '@vue/shared/src';\r\nimport { track, trigger } from './effect';\r\nimport { TrackOpTypes, TriggerOrTypes } from './operators';\r\nimport { reactive } from './reactive';\r\n\r\nexport function ref(value) {\r\n  // 将普通类型 变成一个对象 , 可以是对象 但是一般情况下是对象直接用reactive更合理\r\n  return createRef(value);\r\n}\r\n\r\n// ref 和 reactive的区别 reactive内部采用proxy  ref中内部使用的是defineProperty\r\n\r\nexport function shallowRef(value) {\r\n  return createRef(value, true);\r\n}\r\n\r\n// 后续 看vue的源码 基本上都是高阶函数 做了类似柯里化的功能\r\n\r\nconst convert = (val) => (isObject(val) ? reactive(val) : val);\r\n// beta 版本 之前的版本ref 就是个对象 ，由于对象不方便扩展 改成了类\r\nclass RefImpl {\r\n  public _value; //表示 声明了一个_value属性 但是没有赋值\r\n  public __v_isRef = true; // 产生的实例会被添加 __v_isRef 表示是一个ref属性\r\n  constructor(public rawValue, public shallow) {\r\n    // 参数中前面增加修饰符 标识此属性放到了实例上\r\n    this._value = shallow ? rawValue : convert(rawValue); // 如果是深度 需要把里面的都变成响应式的\r\n  }\r\n  // 类的属性访问器\r\n  get value() {\r\n    // 代理 取值取value 会帮我们代理到 _value上\r\n    track(this, TrackOpTypes.GET, 'value');\r\n    return this._value;\r\n  }\r\n  set value(newValue) {\r\n    if (hasChanged(newValue, this.rawValue)) {\r\n      // 判断老值和新值是否有变化\r\n      this.rawValue = newValue; // 新值会作为老值\r\n      this._value = this.shallow ? newValue : convert(newValue);\r\n      trigger(this, TriggerOrTypes.SET, 'value', newValue);\r\n    }\r\n  }\r\n}\r\nfunction createRef(rawValue, shallow = false) {\r\n  return new RefImpl(rawValue, shallow);\r\n}\r\n\r\nclass ObjectRefImpl {\r\n  public __v_isRef = true;\r\n  constructor(public target, public key) {}\r\n  get value() {\r\n    // 代理\r\n    return this.target[this.key]; // 如果原对象是响应式的就会依赖收集\r\n  }\r\n  set value(newValue) {\r\n    this.target[this.key] = newValue; // 如果原来对象是响应式的 那么就会触发更新\r\n  }\r\n}\r\n// promisify\r\n// promisifyAll\r\n\r\n// 将某一个key对应的值 转化成ref\r\nexport function toRef(target, key) {\r\n  // 可以把一个对象的值转化成 ref类型\r\n  return new ObjectRefImpl(target, key);\r\n}\r\n\r\nexport function toRefs(object) {\r\n  // object 可能传递的是一个数组 或者对象\r\n  const ret = isArray(object) ? new Array(object.length) : {};\r\n  for (let key in object) {\r\n    ret[key] = toRef(object, key);\r\n  }\r\n  return ret;\r\n}\r\n","import { isFunction } from \"@vue/shared/src\";\r\nimport { effect, track, trigger } from \"./effect\";\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\";\r\n// 作业：调试 collectionHandlers ref 的api 和 computed\r\nclass ComputedRefImpl{\r\n    public _dirty = true; // 默认取值时不要用缓存\r\n    public _value;\r\n    public effect;\r\n    constructor(getter,public setter){ // ts 中默认不会挂载到this上\r\n        this.effect = effect(getter,{\r\n            lazy:true, // 默认不执行\r\n            scheduler:()=>{\r\n                if(!this._dirty){\r\n                    this._dirty = true;\r\n                    trigger(this,TriggerOrTypes.SET,'value')\r\n                }\r\n            }\r\n        })\r\n    }\r\n    get value(){ // 计算属性也要收集依赖\r\n        if(this._dirty){\r\n            this._value = this.effect(); // 会将用户的反回值返回\r\n            this._dirty = false;\r\n        }\r\n        track(this,TrackOpTypes.GET,'value')\r\n        return this._value;\r\n    }\r\n    set value(newValue){\r\n        this.setter(newValue)\r\n    }\r\n}\r\n\r\n// vue2 和 vue3 computed原理是不一样的\r\nexport function computed(getterOrOptions){\r\n    let getter;\r\n    let setter;\r\n\r\n\r\n    if(isFunction(getterOrOptions)){\r\n        getter = getterOrOptions;\r\n        setter = () =>{\r\n            console.warn('computed value must be readonly')\r\n        }\r\n    }else{\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n\r\n    return new ComputedRefImpl(getter,setter)\r\n\r\n}","// createVNode  创建虚拟节点\r\n\r\nimport { isArray, isObject, isString, ShapeFlags } from \"@vue/shared/src\";\r\n\r\nexport function isVnode(vnode){\r\n    return vnode.__v_isVnode\r\n}\r\n// h(‘div',{style:{color:red}},'children'); //  h方法和createApp类似\r\nexport const createVNode = (type,props,children = null) =>{\r\n    // 可以根据type 来区分是组件 还是普通的元素\r\n\r\n    // 根据type来区分 是元素还是组件\r\n\r\n    // 给虚拟节点加一个类型\r\n    const shapeFlag = isString(type) ?\r\n        ShapeFlags.ELEMENT : isObject(type)?\r\n            ShapeFlags.STATEFUL_COMPONENT : 0\r\n\r\n\r\n    const vnode = { // 一个对象来描述对应的内容 ， 虚拟节点有跨平台的能力\r\n        __v_isVnode:true,// 他是一个vnode节点\r\n        type,\r\n        props,\r\n        children,\r\n        component:null, // 存放组件对应的实例\r\n        el:null, // 稍后会将虚拟节点和真实节点对应起来\r\n        key: props && props.key,// diff算法会用到key\r\n        shapeFlag // 判断出当前自己的类型 和 儿子的类型\r\n    }\r\n    normalizeChildren(vnode,children);\r\n    return vnode;\r\n}\r\n\r\nfunction normalizeChildren(vnode,children){\r\n    let type = 0;\r\n    if(children == null){ // 不对儿子进行处理\r\n\r\n    } else if(isArray(children)){\r\n        type = ShapeFlags.ARRAY_CHILDREN;\r\n    } else{\r\n        type = ShapeFlags.TEXT_CHILDREN;\r\n    }\r\n    vnode.shapeFlag |=  type\r\n}\r\nexport const Text = Symbol('Text')\r\nexport function normalizeVNode(child){\r\n    if(isObject(child)) return child;\r\n\r\n    return createVNode(Text,null,String(child));\r\n}","import { createVNode } from \"./vnode\"\r\n\r\nexport function createAppAPI(render){\r\n    return function createApp(rootComponent,rootProps){ // 告诉他那个组件那个属性来创建的应用\r\n        const app = {\r\n            _props:rootProps,\r\n            _component:rootComponent,\r\n            _container:null,\r\n            mount(container){ // 挂载的目的地\r\n                // let vnode = {}\r\n                // render(vnode,container);\r\n\r\n                // 1.根据组件创建虚拟节点\r\n                // 2.将虚拟节点和容器获取到后调用render方法进行渲染\r\n\r\n                // 创造虚拟节点\r\n                const vnode = createVNode(rootComponent,rootProps)\r\n\r\n                // 调用render\r\n                render(vnode,container)\r\n\r\n\r\n                app._container = container\r\n            }\r\n        }\r\n        return app\r\n    }\r\n}","import { hasOwn } from \"@vue/shared/src\"\r\n\r\nexport const PublicInstanceProxyHandlers = {\r\n    get({ _: instance }, key) {\r\n        // 取值时 要访问 setUpState， props ,data\r\n        const { setupState, props, data } = instance;\r\n        if (key[0] == '$') {\r\n            return; // 不能访问$ 开头的变量\r\n        }\r\n        if (hasOwn(setupState, key)) {\r\n            return setupState[key];\r\n        } else if (hasOwn(props, key)) {\r\n            return props[key];\r\n        } else if (hasOwn(data, key)) {\r\n            return data[key];\r\n        }\r\n    },\r\n    set({ _: instance }, key, value) {\r\n        const { setupState, props, data } = instance;\r\n        if (hasOwn(setupState, key)) {\r\n            setupState[key] = value;\r\n        } else if (hasOwn(props, key)) {\r\n            props[key] = value;\r\n        } else if (hasOwn(data, key)) {\r\n            data[key] = value;\r\n        }\r\n        return true;\r\n    }\r\n}","// 组件中所有的方法\r\n\r\nimport { isFunction, isObject, ShapeFlags } from \"@vue/shared/src\";\r\nimport { PublicInstanceProxyHandlers } from \"./componentPublicInstance\";\r\n\r\n\r\nexport function createComponentInstance(vnode) {\r\n    // webcomponent 组件需要有“属性” “插槽”\r\n    const instance = { // 组件的实例\r\n        vnode,\r\n        type: vnode.type, // 用户写的对象\r\n        props: {}, // props attrs 有什么区别 vnode.props\r\n        attrs: {},\r\n        slots: {},\r\n        ctx: {},\r\n        data:{},\r\n        setupState: {}, // 如果setup返回一个对象，这个对象会作为setUpstate\r\n        render: null,\r\n        subTree:null, // render函数的返回结果就是subTree\r\n        isMounted: false // 表示这个组件是否挂载过\r\n    }\r\n    instance.ctx = { _: instance } // instance.ctx._\r\n    return instance;\r\n}\r\n\r\nexport function setupComponent(instance) {\r\n    const { props, children } = instance.vnode; // {type,props,children}\r\n\r\n    // 根据props 解析出 props 和 attrs，将其放到instance上\r\n    instance.props = props; // initProps()\r\n    instance.children = children; // 插槽的解析 initSlot()\r\n\r\n    // 需要先看下 当前组件是不是有状态的组件， 函数组件\r\n\r\n    let isStateful = instance.vnode.shapeFlag & ShapeFlags.STATEFUL_COMPONENT\r\n    if (isStateful) { // 表示现在是一个带状态的组件\r\n        // 调用 当前实例的setup方法，用setup的返回值 填充 setupState和对应的render方法\r\n        setupStatefulComponent(instance)\r\n    }\r\n}\r\nfunction setupStatefulComponent(instance) {\r\n    // 1.代理 传递给render函数的参数\r\n    instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers as any)\r\n    // 2.获取组件的类型 拿到组件的setup方法\r\n    let Component = instance.type\r\n    let { setup } = Component;\r\n    // ------ 没有setup------\r\n    if(setup){\r\n        let setupContext = createSetupContext(instance);\r\n        const setupResult = setup(instance.props, setupContext); // instance 中props attrs slots emit expose 会被提取出来，因为在开发过程中会使用这些属性\r\n\r\n        handleSetupResult(instance,setupResult)\r\n\r\n    }else{\r\n        finishComponentSetup(instance);// 完成组件的启动\r\n    }\r\n}\r\nfunction handleSetupResult(instance,setupResult){\r\n    if(isFunction(setupResult)){\r\n        instance.render = setupResult\r\n    }else if(isObject(setupResult)){\r\n        instance.setupState = setupResult\r\n    }\r\n    finishComponentSetup(instance);\r\n}\r\nfunction finishComponentSetup(instance){\r\n    let Component = instance.type\r\n    if(!instance.render){\r\n        // 对template模板进行编译 产生render函数\r\n        // instance.render = render;// 需要将生成render函数放在实例上\r\n        if(!Component.render && Component.template){\r\n            // 编译 将结果 赋予给Component.render\r\n        }\r\n        instance.render = Component.render;\r\n    }\r\n\r\n    // 对vue2.0API做了兼容处理\r\n    // applyOptions\r\n}\r\nfunction createSetupContext(instance) {\r\n    return {\r\n        attrs: instance.attrs,\r\n        slots: instance.slots,\r\n        emit: () => { },\r\n        expose: () => { }\r\n    }\r\n}\r\n// 他们的关系涉及到后面的使用\r\n// instance 表示的组件的状态 各种各样的状态，组件的相关信息\r\n// context 就4个参数 是为了开发时使用的\r\n// proxy 主要为了取值方便  =》 proxy.xxxx","\r\nlet queue = [];\r\nexport function queueJob(job) {\r\n    if(!queue.includes(job)){\r\n        queue.push(job);\r\n        queueFlush();\r\n    }\r\n}\r\nlet isFlushPending = false;\r\nfunction queueFlush(){\r\n    if(!isFlushPending){\r\n        isFlushPending = true;\r\n        Promise.resolve().then(flushJobs)\r\n    }\r\n}\r\n\r\nfunction flushJobs(){\r\n    isFlushPending = false\r\n    // 清空时  我们需要根据调用的顺序依次刷新  , 保证先刷新父在刷新子\r\n    queue.sort((a,b) => a.id - b.id);\r\n    for(let i = 0; i < queue.length; i++){\r\n        const job = queue[i];\r\n        job();\r\n    }\r\n    queue.length = 0;\r\n}","import { effect } from '@vue/reactivity/src';\r\nimport { ShapeFlags } from '@vue/shared/src';\r\nimport { createAppAPI } from './apiCreateApp';\r\nimport { createComponentInstance, setupComponent } from './component';\r\nimport { queueJob } from './scheduler';\r\nimport { normalizeVNode, Text } from './vnode';\r\n\r\nexport function createRenderer(rendererOptions) {\r\n  // 告诉core 怎么渲染\r\n\r\n  const {\r\n    insert: hostInsert,\r\n    remove: hostRemove,\r\n    patchProp: hostPatchProp,\r\n    createElement: hostCreateElement,\r\n    createText: hostCreateText,\r\n    createComment: hostCreateComment,\r\n    setText: hostSetText,\r\n    setElementText: hostSetElementText,\r\n  } = rendererOptions;\r\n\r\n  // -------------------组件----------------------\r\n  const setupRenderEfect = (instance, container) => {\r\n    // 需要创建一个effect 在effect中调用 render方法，这样render方法中拿到的数据会收集这个effect，属性更新时effect会重新执行\r\n\r\n    instance.update = effect(\r\n      function componentEffect() {\r\n        // 每个组件都有一个effect， vue3 是组件级更新，数据变化会重新执行对应组件的effect\r\n        if (!instance.isMounted) {\r\n          // 初次渲染\r\n          let proxyToUse = instance.proxy;\r\n          // $vnode  _vnode\r\n          // vnode  subTree\r\n          let subTree = (instance.subTree = instance.render.call(\r\n            proxyToUse,\r\n            proxyToUse\r\n          ));\r\n\r\n          // 用render函数的返回值 继续渲染\r\n          patch(null, subTree, container);\r\n          instance.isMounted = true;\r\n        } else {\r\n          // diff算法  （核心 diff + 序列优化 watchApi 生命周期）\r\n          // ts 一周\r\n          // 组件库\r\n          // 更新逻辑\r\n        }\r\n      },\r\n      {\r\n        scheduler: queueJob,\r\n      }\r\n    );\r\n  };\r\n  const mountComponent = (initialVNode, container) => {\r\n    // 组件的渲染流程  最核心的就是调用 setup拿到返回值，获取render函数返回的结果来进行渲染\r\n    // 1.先有实例\r\n    const instance = (initialVNode.component =\r\n      createComponentInstance(initialVNode));\r\n    // 2.需要的数据解析到实例上\r\n    setupComponent(instance); // state props attrs render ....\r\n    // 3.创建一个effect 让render函数执行\r\n    setupRenderEfect(instance, container);\r\n  };\r\n  const processComponent = (n1, n2, container) => {\r\n    if (n1 == null) {\r\n      // 组件没有上一次的虚拟节点\r\n      mountComponent(n2, container);\r\n    } else {\r\n      // 组件更新流程\r\n    }\r\n  };\r\n  // ------------------组件 ------------------\r\n\r\n  //----------------- 处理元素-----------------\r\n  const mountChildren = (children, container) => {\r\n    for (let i = 0; i < children.length; i++) {\r\n      let child = normalizeVNode(children[i]);\r\n      patch(null, child, container);\r\n    }\r\n  };\r\n  const mountElement = (vnode, container) => {\r\n    // 递归渲染\r\n    const { props, shapeFlag, type, children } = vnode;\r\n    let el = (vnode.el = hostCreateElement(type));\r\n\r\n    if (props) {\r\n      for (const key in props) {\r\n        hostPatchProp(el, key, null, props[key]);\r\n      }\r\n    }\r\n    if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {\r\n      hostSetElementText(el, children); // 文本比较简单 直接扔进去即可\r\n    } else if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {\r\n      mountChildren(children, el);\r\n    }\r\n    hostInsert(el, container);\r\n  };\r\n  const processElement = (n1, n2, container) => {\r\n    if (n1 == null) {\r\n      mountElement(n2, container);\r\n    } else {\r\n      // 元素更新\r\n    }\r\n  };\r\n  //----------------- 处理元素-----------------\r\n\r\n  // -----------------文本处理-----------------\r\n  const processText = (n1, n2, container) => {\r\n    if (n1 == null) {\r\n      hostInsert((n2.el = hostCreateText(n2.children)), container);\r\n    }\r\n  };\r\n  // -----------------文本处理-----------------\r\n  const patch = (n1, n2, container) => {\r\n    // 针对不同类型 做初始化操作\r\n    const { shapeFlag, type } = n2;\r\n    switch (type) {\r\n      case Text:\r\n        processText(n1, n2, container);\r\n        break;\r\n      default:\r\n        if (shapeFlag & ShapeFlags.ELEMENT) {\r\n          processElement(n1, n2, container);\r\n        } else if (shapeFlag & ShapeFlags.STATEFUL_COMPONENT) {\r\n          processComponent(n1, n2, container);\r\n        }\r\n    }\r\n  };\r\n  const render = (vnode, container) => {\r\n    // core的核心, 根据不同的虚拟节点 创建对应的真实元素\r\n\r\n    // 默认调用render 可能是初始化流程\r\n    patch(null, vnode, container);\r\n  };\r\n  return {\r\n    createApp: createAppAPI(render),\r\n  };\r\n}\r\n// createRenderer 目的是创建一个渲染器\r\n\r\n// 框架 都是将组件 转化成虚拟DOM -》 虚拟DOM生成真实DOM挂载到真实页面上\r\n","import { isArray, isObject } from \"@vue/shared/src\";\r\nimport { createVNode, isVnode } from \"./vnode\";\r\n\r\n\r\nexport function h(type, propsOrChildren, children) {\r\n    const l = arguments.length; // 儿子节点要么是字符串 要么是数组 针对的是createVnode\r\n    if (l == 2) { // 类型 + 属性 、  类型 + 孩子\r\n        // 如果propsOrChildren 是数组 直接作为第三个参数\r\n        if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {\r\n            if(isVnode(propsOrChildren)){\r\n                return createVNode(type,null,[propsOrChildren]);\r\n            }\r\n            return createVNode(type,propsOrChildren)\r\n        } else {\r\n            // 如果第二个参数 不是对象 那一定是孩子\r\n            return createVNode(type, null, propsOrChildren);\r\n        }\r\n    }else{\r\n        if(l > 3){\r\n            children = Array.prototype.slice.call(arguments,2);\r\n        }else if(l === 3 && isVnode(children)){\r\n            children = [children]\r\n        }\r\n        return createVNode(type,propsOrChildren,children);\r\n    }\r\n}","// runtime-dom 核心就是  提供domAPI方法了\r\n//操作节点、操作属性的更新\r\n\r\nimport { extend } from \"@vue/shared/src\";\r\nimport { nodeOps } from \"./nodeOps\"; // 对象\r\nimport { patchProp } from \"./patchProp\"; // 方法\r\nimport {createRenderer} from '@vue/runtime-core'\r\n\r\n// 节点操作就是增删改查\r\n// 属性操作 添加 删除 更新 (样式、类、事件、其他属性)\r\n\r\n\r\n// 渲染时用到的所有方法\r\nconst rendererOptions = extend({ patchProp }, nodeOps)\r\n\r\n// vue中runtime-core 提供了核心的方法 用来处理渲染的，他会使用runtime-dom中的api进行渲染\r\nexport function createApp(rootComponent, rootProps = null) {\r\n    const app = createRenderer(rendererOptions).createApp(rootComponent,rootProps)\r\n    let {mount} = app\r\n    app.mount = function (container) {\r\n        // 清空容器的操作\r\n        container = nodeOps.querySelector(container);\r\n        container.innerHTML = '';\r\n        mount(container); // 函数劫持\r\n        // 将组件 渲染成dom元素 进行挂载\r\n    }\r\n    return app;\r\n}\r\n\r\n\r\n\r\nexport * from '@vue/runtime-core';\r\n\r\n// 用户调用的是runtime-dom  -> runtime-core\r\n// runtime-dom 是为了解决平台差异 （浏览器的）\r\n"],"names":[],"mappings":"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"}